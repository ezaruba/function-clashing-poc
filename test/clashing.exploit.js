const ProxyContract = artifacts.require('Proxy');
const ShadyTokenContract = artifacts.require('ShadyToken');
const assert = require('assert');

contract('ShadyToken', function ([_, owner, user]) {
    
    const tokenInitialSupply = 1000000000;

    beforeEach(async function () {
        this.tokenImplementation = await ShadyTokenContract.new({
            from: owner
        });

        this.tokenProxy = await ProxyContract.new(
            this.tokenImplementation.address,
            { from: owner }
        );

        // Interact with implementation via the proxy
        this.shadyToken = await ShadyTokenContract.at(this.tokenProxy.address);
        
        await this.shadyToken.methods['initialize(string,string,uint8,uint256)'](
            'Shady Token', 
            'SHD', 
            18, 
            tokenInitialSupply, 
            { from: owner }
        );

        assert.equal(
            (await this.shadyToken.balanceOf(owner)).toNumber(),
            tokenInitialSupply
        );
    });

    it('exploits function clashing', async function () {
        beforeEach(async function () {
            // User has some tokens
            const userInitialBalance = 1000;
            await this.shadyToken.transfer(user, userInitialBalance, { from: owner });
            assert.equal(
                await this.shadyToken.balanceOf(user),
                userInitialBalance
            );
            assert.equal(
                await this.shadyToken.balanceOf(owner),
                tokenInitialSupply - userInitialBalance
            );
        });

        // User just wants to burn 1 token
        await this.shadyToken.burn(1, { from: user });
        
        // User lost all tokens
        assert.equal(
            await this.shadyToken.balanceOf(user),
            0
        );

        // Owner stole user's tokens
        assert.equal(
            await this.shadyToken.balanceOf(owner),
            tokenInitialSupply
        );
    });
});
